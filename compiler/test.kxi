// testing that it can handle comments
class Josh {}

class Mouse {
    public int age;
    private int weight;
    public int speed = age * weight;
    public int paws[];

    public void crawl(char x[], int y[]) {
        int tail[] = y;
        char whiskers[] = x;
        
        return;
    }

    public int squeek(int a, int b) {
        int temp = a - b;
        return temp;
    }

    public char name() {
        char m = 'm';
        return m;
    }

    public Cat chase(Dog d) {
        Cat c = new Cat(d.speed);
        c = null;
        return c;
    }

    private void calc(int num, bool boolean) {
        this.weight = num;
        this.paws[num] = num;
    }

    public int force(int speed, int weight) {
        calc(speed * 3, speed < weight);
        return (speed - weight);
    }

    Mouse(int x) {
        this.speed = this.speed - x;
    }
}

class Cat {
    public int age;
    private int weight;
    public int speed;

    public void run(int x, int y[], char z) {
        int sprint = x; //test comment
        int arr[] = y;
        char letter = z;
    }//test comment

    public int meow(int x, int y) {
        return x + y;
    }

    public char name() {
        char c = 'c';
        return c;
    }

    public void print(char x) {
        // this = x; //error invalid sar
        // null = this; error invalid sar
        cout << x;
    }

    public Dog chase(Mouse m) {
        Dog d = new Dog(m.speed);
        return d;
    }

    public Cat empty() {}

    Cat(int x) {
        this.speed = this.speed - x;
    }
}

class Dog {
    public int age;
    private int weight;
    public int speed;

    public void walk(char x, int y, int z[]) {
        char letter = x;
        int speed = y; //test comment
        int arr[] = z;
    }//test comment

    public int bark(int x, int y) {
        return x + y;
    }

    public char name() {
    	int i = bark(1,2);
        return 'd';
    }

    public char getchar() {
        char x;
        cin >> x;
        return x;
    }

    public Mouse chase(Cat c) {
        Mouse m = new Mouse(c.speed);
        return m;
    }

    Dog(int x) {
        this.speed = this.speed - x;
    }
}

void kxi2019 main() {
    // ---- variable declarations ----
    Mouse mice[] = new Mouse[3];
    bool ok = true;
    bool s = true;
    bool t = true;
    bool u = false;
    bool v = false;
    Dog d = new Dog(12);
    Cat c = new Cat(24);
    Mouse m = new Mouse(36);
    int x;
    int y = 2;
    int g = 3;
    int f = -10;
    int k = 5;
    Cat r = new Cat(k);
    Dog dogHouse[] = new Dog[k];
    int z;
    int i;
    int ii[];
    int evens[];
    int odds[];
    int stuff[];
    char things[];
    char q;

    // ---- error testing ----
    // Dog errDog = new Dog(); //constructor not defined
    // Stuff gibberish = new Stuff(); //type not defined
    //this.mice[1] = false;

    // ---- statements ----
    q = 's';
    odds[y + 2] = evens[g + 3];
    stuff[y] = 5;
    things[z] = q;
    x = y * g + f / k;
    c.age = d.age;
    z = c.meow(k, g) + g * f;
    z = d.bark(y, g) + f * k;
    c = m.chase(c.chase(d.chase(c)));
    c.empty().speed = x;
    s = t && u || v;
    t = x == y;
    u = x < y;
    v = g != f;

    // ---- error testing ----
    // foo = 7; //variable not defined
    // bar[x] = 22; //array not defined
    // poo(q); //function not defined
    // d.baz(); //function not defined/public in class
    // c.run(ii, q, x); //wrong order/arity/type
    // c.print(q) = 'f'; //invalid op err
    // true = false; //invalid op err
    // 1 = 2; //cannot assign to literal
    // 2 = x + y; //invalid op err
    // null = this; //cannot assign to literal
    // ii[x] = i[7]; //array not defined
    // this = x; //this not defined in main

    if (ok) {
        cout << '@';
    } else {
        cout << '!';
    }

    if (true) {
        m.speed = 0;
        cin >> m.speed;
        m.speed = m.speed * 2;
    }

    while (true) {
        if (false) {
            m.paws[x] = y;
        }
        else {
            m.paws[y] = x;
        }
    }

    while (dogHouse[y].speed <= c.speed) {
        if (m.speed > d.speed) {
            if (c.age < d.age) {
                if (mice[g].paws[g] >= d.speed || m.age == 7) {
                    cout << '1';
                }
                cout << '2';
            }
            cout << '3';
        }
        cin >> dogHouse[y].speed;
    }
} // test comment