class BST {
	private Node root = null;
	
	BST(int rootEntry) {
		root = new Node(rootEntry);
	}
	
	public void addNode(int newEntry) {
		Node currentNode = root;
		while (currentNode != null) {
			if (newEntry != currentNode.entry) {
				if (newEntry > currentNode.entry) {
					if (currentNode.rightChild == null) {
						currentNode.rightChild = new Node(newEntry);
						currentNode = null;
					}
					else {
						currentNode = currentNode.rightChild;
					}
				}
				else {
					if (currentNode.leftChild == null) {
						currentNode.leftChild = new Node(newEntry);
						currentNode = null;
					}
					else {
						currentNode = currentNode.leftChild;
					}
				}
			}
		}
	}
	
	public void checkNum(int num, int maxDepth) {
		int level = 0;
		Node currentNode = root;
		while (currentNode != null && level <= maxDepth) {
			if (num != currentNode.entry) {
				if (num > currentNode.entry) {
					if (currentNode.rightChild == null) {
						cout << 'N';
						cout << 'o';
						cout << '\n';
						cout << currentNode.entry;
						cout << '\n';
						currentNode = null;
					}
					else {
						currentNode = currentNode.rightChild;
						level = level + 1;
					}
				}
				else {
					if (currentNode.leftChild == null) {
						cout << 'N';
						cout << 'o';
						cout << '\n';
						cout << currentNode.entry;
						cout << '\n';
						currentNode = null;
					}
					else {
						currentNode = currentNode.leftChild;
						level = level + 1;
					}
				}
			}
			else {
				cout << 'Y';
				cout << 'e';
				cout << 's';
				cout << '\n';
				cout << level;
				cout << '\n';
				currentNode = null;
			}
		}
	}
	
	public int input() {
		int number;
		cout << 'i';
		cout << 'n';
		cout << 'p';
		cout << 'u';
		cout << 't';
		cout << ':';
		cin >> number;
		return number;
	}
}

class Node {
	public int entry;
	public Node leftChild = null;
	public Node rightChild = null;
	
	Node(int entry) {
		this.entry = entry;
	}
}

void kxi2019 main() {
	int x;
	// build a BST of [ [ [ [], 10, [ [], 20, [] ] ], 30, [ [], 40, [] ] ], 50, [ [], 60, [ [ [], 70, [] ], 80, [ [ [], 90, [] ], 100, [] ] ] ] ]
	BST bTree = new BST(50);
	bTree.addNode(30);
	bTree.addNode(10);
	bTree.addNode(20);
	bTree.addNode(40);
	bTree.addNode(60);
	bTree.addNode(80);
	bTree.addNode(100);
	bTree.addNode(70);
	bTree.addNode(90);
	
	x = bTree.input();
	while (x != 0) {
		bTree.checkNum(x, 3);
		x = bTree.input();
	}
	
}